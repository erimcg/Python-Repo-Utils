#!/usr/bin/env python

import os
import shutil
import requests
import json
import sys

cwd = os.getcwd() 
sys.path.append(cwd)
import githubinfo

githubUserName = githubinfo.githubUserName
githubPassword = githubinfo.githubPassword
githubOrg = githubinfo.githubOrg

print("Getting list of GitHub repos");
githubAPIGetRepos = 'https://api.github.com/orgs/%s/repos' % (githubOrg)
payload = {"type":"all"}
r = requests.get(githubAPIGetRepos, auth=(githubUserName, githubPassword), data=json.dumps(payload))

print('Get repos status: ' + str(r.status_code))
if r.status_code == 200:
	print (json.dumps(r.json(), sort_keys=True, indent=4, separators=(',', ': ')))

repos = r.json()

studentsDir = cwd + '/Students'
print('Checking if ' + studentsDir + ' exists')
if os.path.exists(studentsDir) == False:
	print('Creating directory: ' + studentsDir)
	try:
		os.mkdir(studentsDir)
	except OSError:
		print('Error creating directory: ' + studentsDir)
		exit()
	print('Directory created')
else:
	print('Directory already exists')

print('Changing cwd: ' + studentsDir)
os.chdir(studentsDir) 

print('Reading usernames')
userNamesFile = cwd + '/usernames'
with open(userNamesFile) as f:
	userNames = f.readlines()

userNames = [x.strip("\n") for x in userNames]

for username in userNames:
	studentDir = studentsDir + '/' + username
	print('Checking if ' + studentsDir + 'exists')
	if os.path.exists(studentDir) == False:
		print('Creating directory: ' + studentDir)
		try:
			os.mkdir(studentDir)
		except OSError:
			print('Error creating directory: ' + studentDir)
			exit()
		print('Directory created')
	else:
		print('Directory already exists')

	print('Changing cwd: ' + studentDir)
	os.chdir(studentDir) 

	if os.path.exists(".git") == False:
		print('Initializing local repo')

		command = 'git init'
		print(command)
		os.system(command)

		command = 'touch .gitignore'
		print(command)
		os.system(command)

		command = 'git add .gitignore'
		print(command)
		os.system(command)
	
		command = 'git commit -m "initial commit"'
		print(command)
		os.system(command)
	else:
		print("local repo already exists ... skipping")

	repoName = username + '.git'
	full_name = githubOrg + '/' + username

	createNewRepo = True 
	for repo in repos:
		for k, v in repo.items():
			if k == 'full_name' and v == full_name:
				print('Searching for existing GitHub repo')
				createNewRepo = False

	if createNewRepo == True:
		print('Creating new GitHub repo')
		githubAPICreateRepo = 'https://api.github.com/orgs/%s/repos' % (githubOrg)
		payload = {"name":repoName, "private":True}
		r = requests.post(githubAPICreateRepo, auth=(githubUserName, githubPassword), data=json.dumps(payload))

		print('Create repo status: ' + str(r.status_code))
		if r.status_code != 201:
			print('Continuing on to next user')
			continue

		print('Repository added successfully')
		#print json.dumps(r.json(), sort_keys=True, indent=4, separators=(',', ': '))

		githubRepo = 'https://github.com/%s/%s' % (githubOrg, repoName)
		command = 'git remote add origin %s' % (githubRepo)
		print(command)
		os.system(command)
	else:
		print('Github repo already exists')

	command = 'git push origin master'
	print(command)
	os.system(command)

	print('Creating team') 
	githubAPICreateTeam = 'https://api.github.com/orgs/%s/teams' % (githubOrg)
	teamName = username
	payload = {"name":teamName, "permission":"push"}
	headers = {"application": "vnd.github.ironman-preview+json"}
	r = requests.post(githubAPICreateTeam, auth=(githubUserName, githubPassword), data=json.dumps(payload), headers=headers)

	print('Create team status: ' + str(r.status_code))
	if r.status_code == 201:
		print('Team added successfully')	
		#print json.dumps(r.json(), sort_keys=True, indent=4, separators=(',', ': '))

		teamId = r.json()['id']

		print('Adding %s repo to team %s' % (repoName, teamId))
		githubAPIAddTeamRepo = 'https://api.github.com/teams/%s/repos/%s/%s' % (teamId, githubOrg, username)
		#headers = {"application": "vnd.github.ironman-preview+json", "Content_Length":0}
		headers = {"Content_Length":"0"}
		r = requests.put(githubAPIAddTeamRepo, auth=(githubUserName, githubPassword), headers=headers)

		print('Add team repo status: ' + str(r.status_code))
		if r.status_code != 204:
			print('Repo not added to team')
		else:
			print('Repo added to team successfully')

		print('Adding %s to team' % (githubUserName))

		githubAPIAddTeamMember = 'https://api.github.com/teams/%s/memberships/%s' % (teamId, githubUserName)
		headers = {"application": "vnd.github.ironman-preview+json", "Content_Length":"0"}
		payload = {"role":"maintainer"}
		r = requests.put(githubAPIAddTeamMember, auth=(githubUserName, githubPassword), headers=headers)

		print('Add team member status: ' + str(r.status_code))
		if r.status_code != 200:
			print('Admin member not added to team')
		else:
			print('Admin member added to team successfully')
	
		#print json.dumps(r.json(), sort_keys=True, indent=4, separators=(',', ': '))
	else:
		print('Team not added')




